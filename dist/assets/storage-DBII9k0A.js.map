{"version":3,"file":"storage-DBII9k0A.js","sources":["../../src/services/storage.ts"],"sourcesContent":["/**\n * Storage Service - Chrome Storage API Wrapper\n * \n * Provides a typed, promise-based interface for managing extension data:\n * - Notes: AI-generated summaries, explanations, translations\n * - Settings: User preferences (target language, UI state)\n * - Page Summaries: Cached full-page summaries (URL-keyed)\n * - Chat History: Multi-turn conversation history (URL-keyed)\n * \n * All data is stored in chrome.storage.local for persistence across sessions.\n */\n\nimport type { Note } from '../utils/messaging'\n\n// Storage keys\nconst NOTES_KEY = 'notes'\nconst SETTINGS_KEY = 'settings'\nconst PAGE_SUMMARIES_KEY = 'pageSummaries'\nconst PAGE_CHAT_HISTORY_KEY = 'pageChatHistory'\n\n/**\n * Generate SHA-256 hash of text\n * Used for efficiently comparing page content changes without storing full text\n */\nexport async function hashText(text: string): Promise<string> {\n  const encoder = new TextEncoder()\n  const data = encoder.encode(text)\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n}\n\n/**\n * Promise wrapper for chrome.storage.local.get\n */\nfunction getLocal<T = any>(key: string): Promise<T | undefined> {\n  return new Promise((resolve) => {\n    chrome.storage.local.get([key], (res) => resolve(res[key] as T | undefined))\n  })\n}\n\n/**\n * Promise wrapper for chrome.storage.local.set\n */\nfunction setLocal(obj: Record<string, any>): Promise<void> {\n  return new Promise((resolve) => chrome.storage.local.set(obj, () => resolve()))\n}\n\n// ============================================================================\n// Notes API\n// ============================================================================\n\n/**\n * Add a new note to storage\n * Notes are prepended (newest first)\n */\nexport async function addNote(n: Note) {\n  const list = (await getLocal<Note[]>(NOTES_KEY)) || []\n  list.unshift(n)  // Add to beginning\n  await setLocal({ [NOTES_KEY]: list })\n}\n\n/**\n * Get all notes, sorted by creation date (newest first)\n */\nexport async function listNotes(): Promise<Note[]> {\n  const list = (await getLocal<Note[]>(NOTES_KEY)) || []\n  return list.sort((a, b) => (b.createdAt || 0) - (a.createdAt || 0))\n}\n\n/**\n * Delete all notes\n */\nexport async function clearNotes() {\n  await setLocal({ [NOTES_KEY]: [] })\n}\n\n// ============================================================================\n// Settings API\n// ============================================================================\n\ntype Settings = Record<string, any>\n\n/**\n * Save a setting value\n * Common settings: 'targetLang', 'showWelcomeBanner', 'floatPos', 'floatHidden'\n */\nexport async function setSetting(key: string, val: any) {\n  const st = (await getLocal<Settings>(SETTINGS_KEY)) || {}\n  st[key] = val\n  await setLocal({ [SETTINGS_KEY]: st })\n}\n\n/**\n * Get a setting value\n */\nexport async function getSetting<T = any>(key: string): Promise<T | undefined> {\n  const st = (await getLocal<Settings>(SETTINGS_KEY)) || {}\n  return st[key] as T | undefined\n}\n\n// ============================================================================\n// Page Summary Cache API\n// ============================================================================\n\nexport type PageSummaryCache = {\n  summary: string        // The generated summary\n  text: string           // The original page text\n  contentHash: string    // Hash of page content (for detecting changes)\n  timestamp: number      // When the summary was created\n  isSaved?: boolean      // Whether saved to notes\n}\n\n/**\n * Get cached page summary for a URL\n */\nexport async function getPageSummary(url: string): Promise<PageSummaryCache | undefined> {\n  const cache = (await getLocal<Record<string, PageSummaryCache>>(PAGE_SUMMARIES_KEY)) || {}\n  return cache[url]\n}\n\n/**\n * Cache a page summary\n * Automatically computes content hash for change detection\n */\nexport async function setPageSummary(url: string, summary: string, text: string) {\n  const cache = (await getLocal<Record<string, PageSummaryCache>>(PAGE_SUMMARIES_KEY)) || {}\n  const contentHash = await hashText(text)\n  cache[url] = { summary, text, contentHash, timestamp: Date.now(), isSaved: false }\n  await setLocal({ [PAGE_SUMMARIES_KEY]: cache })\n}\n\n/**\n * Update whether the page summary has been saved to notes\n */\nexport async function updatePageSummarySaveStatus(url: string, isSaved: boolean) {\n  const cache = (await getLocal<Record<string, PageSummaryCache>>(PAGE_SUMMARIES_KEY)) || {}\n  if (cache[url]) {\n    cache[url].isSaved = isSaved\n    await setLocal({ [PAGE_SUMMARIES_KEY]: cache })\n  }\n}\n\n/**\n * Clear cached page summary for a URL\n */\nexport async function clearPageSummary(url: string) {\n  const cache = (await getLocal<Record<string, PageSummaryCache>>(PAGE_SUMMARIES_KEY)) || {}\n  delete cache[url]\n  await setLocal({ [PAGE_SUMMARIES_KEY]: cache })\n}\n\n// ============================================================================\n// Page Chat History API\n// ============================================================================\n\nexport type ChatMessage = {\n  role: 'user' | 'assistant'\n  content: string\n  timestamp: number\n}\n\nexport type PageChatHistory = {\n  messages: ChatMessage[]    // Conversation history\n  contentHash: string        // Hash of page content (for validation)\n  pageSummary: string        // Initial page summary (context for chat)\n  timestamp: number          // Last update time\n}\n\n/**\n * Get chat history for a URL\n * Returns undefined if no history exists or page content has changed\n */\nexport async function getPageChatHistory(url: string): Promise<PageChatHistory | undefined> {\n  const cache = (await getLocal<Record<string, PageChatHistory>>(PAGE_CHAT_HISTORY_KEY)) || {}\n  return cache[url]\n}\n\n/**\n * Save chat history for a URL\n * Should be called after each chat turn to persist conversation\n */\nexport async function setPageChatHistory(url: string, history: Omit<PageChatHistory, 'timestamp'>) {\n  const cache = (await getLocal<Record<string, PageChatHistory>>(PAGE_CHAT_HISTORY_KEY)) || {}\n  cache[url] = { ...history, timestamp: Date.now() }\n  await setLocal({ [PAGE_CHAT_HISTORY_KEY]: cache })\n}\n\n/**\n * Clear chat history for a URL\n * Called when page content changes or user explicitly refreshes\n */\nexport async function clearPageChatHistory(url: string) {\n  const cache = (await getLocal<Record<string, PageChatHistory>>(PAGE_CHAT_HISTORY_KEY)) || {}\n  delete cache[url]\n  await setLocal({ [PAGE_CHAT_HISTORY_KEY]: cache })\n}\n"],"names":["NOTES_KEY","SETTINGS_KEY","PAGE_SUMMARIES_KEY","PAGE_CHAT_HISTORY_KEY","hashText","text","data","hashBuffer","b","getLocal","key","resolve","res","setLocal","obj","addNote","n","list","listNotes","a","clearNotes","setSetting","val","st","getSetting","getPageSummary","url","setPageSummary","summary","cache","contentHash","updatePageSummarySaveStatus","isSaved","clearPageSummary","getPageChatHistory","setPageChatHistory","history","clearPageChatHistory"],"mappings":"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"}